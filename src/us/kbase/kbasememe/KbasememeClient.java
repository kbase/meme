package us.kbase.kbasememe;

import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;
import org.codehaus.jackson.type.TypeReference;
import us.kbase.JsonClientCaller;

/**
 * <p>
 * Original spec-file module name: KbaseMEME
 * </p>
 * 
 * <pre>
 * Module KBaseMEME version 1.0
 * This module provides a set of methods for work with regulatory motifs. These mathods integrate capabilities of five predictive tools into KBase:
 * - MEME is a tool for discovering motifs in a group of related DNA or protein sequences
 * - TOMTOM is a tool for comparison of an input DNA motif to the elements of a database of known motifs
 * - MAST is a tool for searching biological sequence databases for occurencies of known motifs
 * - cMonkey [add description]
 * - Inferelator [add description].
 * Data types summary
 * This module works with special data types: Motif and MotifCollection.
 * Motif data type represents DNA sequence motif predicted by MEME.
 * MotifCollection data type represents results of a single MEME analysis and contains parameters of the search and links to motifs identified.
 * Methods summary
 * searchMotifsFromSequencesWithMeme - runs MEME for a set of nucleotide sequences and returns collection of sequence motifs
 * compareMotifsWithTomtom - runs TOMTOM for two collection of motifs and returns list of hits
 * findSitesByMotifCollectionWithMast - runs MAST for collection of motifs vs. sequence database and returns list of hits
 * getMotifFromCollection - returns a single motif from collection (are we really need it?)
 * </pre>
 */
public class KbasememeClient {
	private JsonClientCaller caller;

	public KbasememeClient(String url) throws MalformedURLException {
		caller = new JsonClientCaller(url);
	}

	/**
	 * <p>
	 * Original spec-file function name: searchMotifsFromSequencesWithMeme
	 * </p>
	 * 
	 * <pre>
	 * Returns a collection of motifs generated by MEME with input parameters
	 * MEME will be run with -dna -text parameters
	 * SequenceSet sequenceSet - input set of sequences
	 * string modMeme - distribution of motifs, acceptable values are "oops", "zoops", "anr"
	 * string nmotifsMeme - maximum number of motifs to find
	 * string minwMeme - minumum motif width
	 * string maxwMeme - maximum motif width
	 * string nsitesMeme - number of sites for each motif
	 * string minsitesMeme - minimum number of sites for each motif
	 * string maxsitesMeme - maximum number of sites for each motif
	 * int palMeme - force palindromes, acceptable values are 0 and 1
	 * int revcompMeme - allow sites on + or - DNA strands, acceptable values are 0 and 1
	 * </pre>
	 * 
	 * @param sequenceSet
	 *            Original type "SequenceSet" (see
	 *            {@link us.kbase.kbasememe.SequenceSet SequenceSet} for
	 *            details)
	 * @return Original type "MotifCollectionMeme" (see
	 *         {@link us.kbase.kbasememe.MotifCollectionMeme
	 *         MotifCollectionMeme} for details)
	 */
	public MotifCollectionMeme searchMotifsFromSequencesWithMeme(
			SequenceSet sequenceSet, String modMeme, Integer nmotifsMeme,
			Integer minwMeme, Integer maxwMeme, Integer nsitesMeme,
			Integer minsitesMeme, Integer maxsitesMeme, Integer palMeme,
			Integer revcompMeme) throws Exception {
		List<Object> args = new ArrayList<Object>();
		args.add(sequenceSet);
		args.add(modMeme);
		args.add(nmotifsMeme);
		args.add(minwMeme);
		args.add(maxwMeme);
		args.add(nsitesMeme);
		args.add(minsitesMeme);
		args.add(maxsitesMeme);
		args.add(palMeme);
		args.add(revcompMeme);
		TypeReference<List<MotifCollectionMeme>> retType = new TypeReference<List<MotifCollectionMeme>>() {
		};
		List<MotifCollectionMeme> res = caller.jsonrpcCall(
				"KbaseMEME.searchMotifsFromSequencesWithMeme", args, retType,
				true, false);
		return res.get(0);
	}

	/**
	 * <p>
	 * Original spec-file function name: searchMotifsFromWorkspaceWithMeme
	 * </p>
	 * 
	 * <pre>
	 * Returns a collection of motifs generated by MEME with input parameters
	 * MEME will be run with -dna -text parameters
	 * string kbaseSequenceSetId - KBase identifier of sequence set
	 * string modMeme - distribution of motifs, acceptable values are "oops", "zoops", "anr"
	 * string nmotifsMeme - maximum number of motifs to find
	 * string minwMeme - minumum motif width
	 * string maxwMeme - maximum motif width
	 * string nsitesMeme - number of sites for each motif
	 * string minsitesMeme - minimum number of sites for each motif
	 * string maxsitesMeme - maximum number of sites for each motif
	 * int palMeme - force palindromes, acceptable values are 0 and 1
	 * int revcompMeme - allow sites on + or - DNA strands, acceptable values are 0 and 1
	 * </pre>
	 * 
	 * @return Original type "MotifCollectionMeme" (see
	 *         {@link us.kbase.kbasememe.MotifCollectionMeme
	 *         MotifCollectionMeme} for details)
	 */
	public MotifCollectionMeme searchMotifsFromWorkspaceWithMeme(
			String kbaseSequenceSetId, String modMeme, Integer nmotifsMeme,
			Integer minwMeme, Integer maxwMeme, Integer nsitesMeme,
			Integer minsitesMeme, Integer maxsitesMeme, Integer palMeme,
			Integer revcompMeme) throws Exception {
		List<Object> args = new ArrayList<Object>();
		args.add(kbaseSequenceSetId);
		args.add(modMeme);
		args.add(nmotifsMeme);
		args.add(minwMeme);
		args.add(maxwMeme);
		args.add(nsitesMeme);
		args.add(minsitesMeme);
		args.add(maxsitesMeme);
		args.add(palMeme);
		args.add(revcompMeme);
		TypeReference<List<MotifCollectionMeme>> retType = new TypeReference<List<MotifCollectionMeme>>() {
		};
		List<MotifCollectionMeme> res = caller.jsonrpcCall(
				"KbaseMEME.searchMotifsFromWorkspaceWithMeme", args, retType,
				true, false);
		return res.get(0);
	}

	/**
	 * <p>
	 * Original spec-file function name: compareMotifsWithTomtom
	 * </p>
	 * 
	 * <pre>
	 * Returns list of TOMTOM hits
	 * TOMTOM will be run with -text parameter
	 * MotifCollectionMeme queryMotifCollection - query motifs for TOMTOM run
	 * MotifCollectionMeme targetMotifCollection - target motifs for TOMTOM run
	 * float threshTomtom - thresh parameter of TOMTOM run, must be smaller than or equal to 1.0 unless evalueTomtom == 1
	 * int evalueTomtom - evalue parameter of TOMTOM run (accepable values are "0" and "1")
	 * string distTomtom - value of dist parameter of TOMTOM run (accepable values are "allr", "ed", "kullback", "pearson", "sandelin")
	 * int internalTomtom - internal parameter of TOMTOM run (accepable values are "0" and "1")
	 * int minOverlapTomtom - value of min-overlap parameter of TOMTOM run. In case a query motif is smaller than minOverlapTomtom specified, then the motif's width is used as the minimum overlap for that query.
	 * </pre>
	 * 
	 * @param queryMotifCollection
	 *            Original type "MotifCollectionMeme" (see
	 *            {@link us.kbase.kbasememe.MotifCollectionMeme
	 *            MotifCollectionMeme} for details)
	 * @param targetMotifCollection
	 *            Original type "MotifCollectionMeme" (see
	 *            {@link us.kbase.kbasememe.MotifCollectionMeme
	 *            MotifCollectionMeme} for details)
	 */
	public List<HitTomtom> compareMotifsWithTomtom(
			MotifCollectionMeme queryMotifCollection,
			MotifCollectionMeme targetMotifCollection, Double threshTomtom,
			Integer evalueTomtom, String distTomtom, Integer internalTomtom,
			Integer minOverlapTomtom) throws Exception {
		List<Object> args = new ArrayList<Object>();
		args.add(queryMotifCollection);
		args.add(targetMotifCollection);
		args.add(threshTomtom);
		args.add(evalueTomtom);
		args.add(distTomtom);
		args.add(internalTomtom);
		args.add(minOverlapTomtom);
		TypeReference<List<List<HitTomtom>>> retType = new TypeReference<List<List<HitTomtom>>>() {
		};
		List<List<HitTomtom>> res = caller
				.jsonrpcCall("KbaseMEME.compareMotifsWithTomtom", args,
						retType, true, false);
		return res.get(0);
	}

	/**
	 * <p>
	 * Original spec-file function name: findSitesByMotifCollectionWithMast
	 * </p>
	 * 
	 * <pre>
	 * Returns list of MAST hits
	 * MAST will be run with -hit_list parameter
	 * MotifCollection queryMotifCollection - query motifs for MAST run
	 * sequenceSet targetSequenceDatabase - target sequences for MAST run
	 * float mtMast - value of mt parameter for MAST run
	 * </pre>
	 * 
	 * @param queryMotifCollection
	 *            Original type "MotifCollectionMeme" (see
	 *            {@link us.kbase.kbasememe.MotifCollectionMeme
	 *            MotifCollectionMeme} for details)
	 * @param targetSequenceDatabase
	 *            Original type "SequenceSet" (see
	 *            {@link us.kbase.kbasememe.SequenceSet SequenceSet} for
	 *            details)
	 */
	public List<HitMast> findSitesByMotifCollectionWithMast(
			MotifCollectionMeme queryMotifCollection,
			SequenceSet targetSequenceDatabase, Double mtMast) throws Exception {
		List<Object> args = new ArrayList<Object>();
		args.add(queryMotifCollection);
		args.add(targetSequenceDatabase);
		args.add(mtMast);
		TypeReference<List<List<HitMast>>> retType = new TypeReference<List<List<HitMast>>>() {
		};
		List<List<HitMast>> res = caller.jsonrpcCall(
				"KbaseMEME.findSitesByMotifCollectionWithMast", args, retType,
				true, false);
		return res.get(0);
	}

	/**
	 * <p>
	 * Original spec-file function name: findSitesByMotifCollectionWsWithMast
	 * </p>
	 * 
	 * <pre>
	 * Returns list of MAST hits
	 * MAST will be run with -hit_list parameter
	 * MotifCollection queryMotifCollection - query motifs for MAST run
	 * string kbaseSequenceSetId - identifier of the set of target sequences for MAST run
	 * float mtMast - value of mt parameter for MAST run
	 * </pre>
	 * 
	 * @param queryMotifCollection
	 *            Original type "MotifCollectionMeme" (see
	 *            {@link us.kbase.kbasememe.MotifCollectionMeme
	 *            MotifCollectionMeme} for details)
	 */
	public List<HitMast> findSitesByMotifCollectionWsWithMast(
			MotifCollectionMeme queryMotifCollection,
			String kbaseSequenceSetId, Double mtMast) throws Exception {
		List<Object> args = new ArrayList<Object>();
		args.add(queryMotifCollection);
		args.add(kbaseSequenceSetId);
		args.add(mtMast);
		TypeReference<List<List<HitMast>>> retType = new TypeReference<List<List<HitMast>>>() {
		};
		List<List<HitMast>> res = caller.jsonrpcCall(
				"KbaseMEME.findSitesByMotifCollectionWsWithMast", args,
				retType, true, false);
		return res.get(0);
	}
}
